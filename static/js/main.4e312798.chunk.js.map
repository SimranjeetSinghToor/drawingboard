{"version":3,"sources":["components/Pencil/index.js","components/Eraser/index.js","components/ColorPallete/index.js","components/ControlBar/index.js","Pages/DrawingBoard/index.js","App.js","serviceWorker.js","index.js"],"names":["Pencil","props","useState","strokeSelector","toggleStrokeSelector","strokeHandler","size","handleStroke","handleColor","className","class","onClick","jsx","Eraser","e","preventDefault","Color","displayed","setDisplayed","color","setColor","onChange","pickerColor","hex","Controls","Board","canvasRef","React","useRef","parentRef","ctx","setCtx","x","y","canvasOffset","setCanvasOffset","drawing","setDrawing","position","setPosition","useEffect","canv","current","width","offsetWidth","height","offsetHeight","canvCtx","getContext","lineJoin","lineCap","lineWidth","offset","getBoundingClientRect","parseInt","left","top","ref","inputcolor","cSelection","stroke","onMouseDown","clientX","clientY","onMouseUp","onMouseMove","mousex","mousey","strokeStyle","beginPath","moveTo","lineTo","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4e312798.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nfunction Pencil(props) {\n  let [strokeSelector,toggleStrokeSelector] = useState(false)\n  function handleClick() {\n    toggleStrokeSelector(!strokeSelector)\n  }\n  function strokeHandler(size) {\n    props.handleStroke(size)\n    props.handleColor(\"#000000\",\"pencil\")\n    toggleStrokeSelector(false)\n  }\n\n  return (\n    <div className=\"pencil\">\n      <span class=\"material-icons\" onClick={handleClick}>\n        edit\n      </span>\n      {strokeSelector && <div className=\"stroke-container\">\n        <div>Select stroke size</div>\n        <div onClick={()=>strokeHandler(1)}>1</div>\n        <div onClick={()=>strokeHandler(3)}>3</div>\n        <div onClick={()=>strokeHandler(5)}>5</div>\n      </div>}\n      <style jsx>{`\n        .pencil {\n          position:relative;\n        }\n        .stroke-container {\n          min-width:100px;\n          font-size:12px;\n          border-radius:4px;\n          padding:5px;\n          box-shadow: 0 0 8px 0 rgba(0,0,0,.1);\n          position:absolute;\n          left:105%;\n          top:0;\n        }\n        .stroke-container div {\n          margin-bottom:5px;\n          cursor:pointer;\n        }\n      `}\n      </style>\n    </div>\n  );\n}\n\nexport default Pencil;\n","import React from \"react\";\n\n\nfunction Eraser(props) {\n  function handleEraser(e) {\n    e.preventDefault();\n    props.handleColor(\"#ffffff\",\"eraser\");\n    props.handleStroke(8)\n  }\n\n  return (\n    <div className=\"eraser\">\n      <span onClick={handleEraser} class=\"material-icons\">\n        format_paint\n      </span>\n    </div>\n  );\n}\n\nexport default Eraser;\n","import React, { useState } from \"react\";\nimport { ChromePicker } from \"react-color\";\n\nfunction Color(props) {\n  const [displayed, setDisplayed] = useState(false);\n  const [color, setColor] = useState(\"#000000\",\"color\");\n\n  function handleClick() {\n    setDisplayed(true);\n  }\n\n  function handleClose() {\n    setDisplayed(false);\n  }\n\n  function pickColor(pickerColor) {\n    setColor(pickerColor.hex);\n    props.handleColor(pickerColor.hex);\n  }\n\n  return (\n    <div className=\"color\">\n      <span class=\"material-icons\" onClick={handleClick}>\n      color_lens\n      </span>\n      {displayed ? (\n        <div className={\"popover\"}>\n          <div className={\"cover\"} onClick={handleClose} />\n          <ChromePicker color={color} onChange={pickColor} />\n        </div>\n      ) : null}\n      <style jsx>{`\n        .popover {\n          position:absolute;\n          z-index:2;\n        }\n        .cover {\n          position: fixed;\n          top: 0px;\n          right: 0px;\n          bottom: 0px;\n          left: 0px;\n        }\n      `}</style>\n    </div>\n  );\n}\n\nexport default Color;\n","import React from \"react\";\nimport Pencil from \"../Pencil\";\nimport Eraser from \"../Eraser\";\nimport Color from '../ColorPallete'\n\nfunction Controls(props) {\n  return (\n    <div className=\"controls\">\n      <Pencil handleColor={props.handleColor} handleStroke={props.handleStroke} />\n      <Eraser handleColor={props.handleColor} handleStroke={props.handleStroke} />\n      <Color handleColor={props.handleColor} handleStroke={props.handleStroke} />\n      <style>{`\n        .controls {\n          position: absolute;\n          top: 0;\n          left: 0;\n          display: flex;\n          justify-content: center;\n          flex-direction: column;\n          height:100vh;\n          width: auto;\n        }\n        .controls .fa-icon {\n          cursor: pointer;\n          font-size: 3rem;\n          margin: 0.5rem;\n          padding: 0.5rem;\n          border-radius: 30%;\n          box-shadow: 0 0 6px black;\n          z-index: 2;\n          color: #071a54;\n          background: linear-gradient(\n            90deg,\n            rgba(174, 238, 237, 1) 0%,\n            rgba(181, 23, 23, 1) 100%\n          );\n        }\n      \n      `}</style>\n    </div>\n  );\n}\n\nexport default Controls;\n","import React, { useState, useEffect } from \"react\";\nimport Controls from \"../../components/ControlBar\";\n\nfunction Board() {\n  let canvasRef = React.useRef(null);\n  let parentRef = React.useRef(null);\n  let [ctx, setCtx] = useState({});\n  let [canvasOffset, setCanvasOffset] = useState({ x: 0, y: 0 });\n  let [drawing, setDrawing] = useState(false);\n  let [position, setPosition] = useState({ x: 0, y: 0 });\n  let [color, setColor] = useState(\"#000000\");\n\n  useEffect(() => {\n    let canv = canvasRef.current;\n    canv.width = parentRef.current.offsetWidth;\n    canv.height = parentRef.current.offsetHeight;\n\n    let canvCtx = canv.getContext(\"2d\");\n    canvCtx.lineJoin = \"round\";\n    canvCtx.lineCap = \"round\";\n    canvCtx.lineWidth = 1;\n    setCtx(canvCtx);\n\n    let offset = canv.getBoundingClientRect();\n    setCanvasOffset({ x: parseInt(offset.left), y: parseInt(offset.top) });\n  }, [ctx]);\n\n  function handleMouseDown(e) {\n    setDrawing(true);\n    setPosition({\n      x: parseInt(e.clientX - canvasOffset.x),\n      y: parseInt(e.clientY - canvasOffset.y),\n    });\n  }\n  function handleMouseUp() {\n    setDrawing(false);\n  }\n\n  function handleMouseMove(e) {\n    let mousex = e.clientX - canvasOffset.x;\n    let mousey = e.clientY - canvasOffset.y;\n    if (drawing) {\n      ctx.strokeStyle = color;\n      ctx.beginPath();\n      ctx.moveTo(position.x, position.y);\n      ctx.lineTo(mousex, mousey);\n      ctx.stroke();\n    }\n    setPosition({ x: mousex, y: mousey });\n  }\n\n  function handleColor(inputcolor,cSelection) {\n    if(cSelection == \"pencil\" && color == \"#ffffff\")\n      setColor(inputcolor)\n    else if(cSelection != \"pencil\")\n      setColor(inputcolor)\n  }\n\n  function handleStroke(stroke) {\n    ctx.lineWidth = stroke;\n  }\n  return (\n    <div className=\"board\" ref={parentRef}>\n      <Controls handleColor={handleColor} handleStroke={handleStroke}/>\n      <canvas\n        ref={canvasRef}\n        onMouseDown={handleMouseDown}\n        onMouseUp={handleMouseUp}\n        onMouseMove={handleMouseMove}\n      />\n      <style jsx>{`\n        .board {\n          background-color: white;\n          cursor: crosshair;\n          margin: 0 auto;\n          position: relative;\n          width: 100%;\n          overflow: hidden;\n          flex: auto;\n          display: flex;\n          flex-direction: column;\n          justify-content: center;\n          align-items: center;\n        }     \n      `}</style>\n    </div>\n  );\n}\n\nexport default Board;\n","import React from \"react\";\nimport \"./App.css\";\nimport Board from \"./Pages/DrawingBoard\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Board />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}